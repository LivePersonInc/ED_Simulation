/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ed_simulation;

import java.awt.Color;
import java.awt.geom.Line2D;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bmathijs
 */
public class SimulationApplication extends javax.swing.JFrame implements DocumentListener {

    double lambda = 2;
    double mu = 1;
    double delta = 0.2;
    double p = 0.5;
    double maxTime = 100000;
    int s = 5;
    int n = 18;
    SimResults srErlangH;
    SimResults srYomTov;
    SimResults srJennings;
    SimThread st = new SimThread(null, 0);
    public final static int MAX_DEC = 5;
    Object[][] AllInSystempdf;
    Object[][] AllInEDpdf;
    Object[][] serviceQueuepdf;
    Object[][] AllInSystemcdf;
    Object[][] AllInEDcdf;
    Object[][] serviceQueuecdf;
    
    Object[][] outputTable = new Object[0][0];
    double[][] plottingCoordinates = new double[0][0];
    double maxValue;
    int xMin;
    int xMax;
    int yMin;
    int yMax;
    double ySpacing;
    double xSpacing;

    

    public SimulationApplication() {
        initComponents();
        moreInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LambdaTextField2 = new javax.swing.JTextField();
        LambdaTextField6 = new javax.swing.JTextField();
        LambdaTextField7 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        runsTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        LambdaTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        MuTextField = new javax.swing.JTextField();
        sTextField = new javax.swing.JTextField();
        DeltaTextField = new javax.swing.JTextField();
        nTextField = new javax.swing.JTextField();
        pTextField = new javax.swing.JTextField();
        ErlangHCheckBox = new javax.swing.JCheckBox();
        ErlangRCheckBox = new javax.swing.JCheckBox();
        MMsnCheckBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        maxTimeTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputTextArea = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        simButton = new javax.swing.JButton();
        EfficientBox = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        ChoiceBox = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jPanel4 = new Graph();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        PCDF_Box = new javax.swing.JComboBox();
        PlotPanel = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                super.paintComponent(g);
                if ( outputTable.length != 0 ){
                    paintPlot(g);
                }

            }

            public void paintPlot(Graphics g){
                int width = this.getWidth();
                int height = this.getHeight();

                boolean[] plot = new boolean[3];
                plot[0] =  ErlangHCheck.isSelected();
                plot[1] =  YomTovCheck.isSelected();
                plot[2] =  JenningsCheck.isSelected();

                if ( !( !plot[0] && !plot[1] && !plot[2] ) ){
                    int[][] c = getCoordinates(plot);

                    if (plot[0] && c[1][0] != -1){
                        g.setColor(Color.red);
                        for( int i = 0; i < c[0].length-2; i++ ){
                            g.drawLine(c[0][i], c[1][i], c[0][i+1], c[1][i+1]);
                        }}
                        if (plot[1] && c[2][0] != -1){
                            g.setColor(Color.green);
                            for( int i = 0; i < c[0].length-2; i++ ){
                                g.drawLine(c[0][i], c[2][i], c[0][i+1], c[2][i+1]);
                            }}
                            if (plot[2] && c[3][0] != -1){
                                g.setColor(Color.blue);
                                for( int i = 0; i < c[0].length-2; i++ ){
                                    g.drawLine(c[0][i], c[3][i], c[0][i+1], c[3][i+1]);
                                }}

                                g.setColor(Color.BLACK);
                                g.drawLine(30, height - 30, width - 20, height - 30);
                                g.drawLine(40, height - 20, 40, 20);

                                double step = (int)(maxValue*100/5);
                                step = step/100;
                                //System.out.println("Step: "+step+"  Max value: "+maxValue+ "ySpacing: "+ySpacing+ " ymin "+yMin+ " ymax "+yMax);
                                for( double y = step; y <= maxValue; y += step ){
                                    g.drawLine(35,(int)( yMin - ySpacing *y), 40, (int)(yMin - ySpacing *y));
                                    g.drawString(""+dec(y), 5, (int)(yMin - ySpacing *y));
                                    //System.out.println(y+ " "+(int)( yMin - ySpacing *y));
                                }

                                int textStep = (int)((c[0].length/2)/(20)+1);
                                System.out.println(textStep);
                                for( int x = 1; x < c[0].length-2; x++ ){
                                    g.drawLine((int)(xMin + xSpacing*x),yMin, (int)(xMin + xSpacing*x),yMin+2);
                                    if( x % textStep == 0 ) g.drawString(""+x, (int)(xMin + xSpacing*x), (int)(yMin + 15));
                                }
                            }
                        }

                    };
                    ErlangHCheck = new javax.swing.JCheckBox();
                    YomTovCheck = new javax.swing.JCheckBox();
                    JenningsCheck = new javax.swing.JCheckBox();

                    jLabel7.setText("p");

                    runsTextField.setText(""+maxTime);

                    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                    jPanel1.setLayout(jPanel1Layout);
                    jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
                    );
                    jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 7, Short.MAX_VALUE)
                    );

                    jLabel1.setText("Lambda");

                    LambdaTextField.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            LambdaTextFieldActionPerformed(evt);
                        }
                    });

                    jLabel2.setText("Mu");

                    jLabel3.setText("Delta");

                    jLabel4.setText("s");

                    jLabel5.setText("n");

                    jLabel6.setText("p");

                    MuTextField.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            MuTextFieldActionPerformed(evt);
                        }
                    });

                    ErlangHCheckBox.setSelected(true);
                    ErlangHCheckBox.setText("Erlang-H");
                    ErlangHCheckBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            ErlangHCheckBoxActionPerformed(evt);
                        }
                    });

                    ErlangRCheckBox.setSelected(true);
                    ErlangRCheckBox.setText("Semi-open Erlang-R");
                    ErlangRCheckBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            ErlangRCheckBoxActionPerformed(evt);
                        }
                    });

                    MMsnCheckBox.setSelected(true);
                    MMsnCheckBox.setText("Modified M/M/s//n");
                    MMsnCheckBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            MMsnCheckBoxActionPerformed(evt);
                        }
                    });

                    jLabel8.setText("Sim. time");

                    maxTimeTextField.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            maxTimeTextFieldActionPerformed(evt);
                        }
                    });

                    OutputTextArea.setEditable(false);
                    OutputTextArea.setFont(new java.awt.Font("sansserif", 2, 11)); // NOI18N
                    OutputTextArea.setToolTipText("");
                    jScrollPane1.setViewportView(OutputTextArea);

                    jTable1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
                    jTable1.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                            {"Mean number in system","","",""},
                            {"Mean number in ED","","",""},
                            {"","","",""},
                            {"Mean holding queue length","","",""},
                            {"Mean holding time","","",""},
                            {"Holding probability","","",""},
                            {"","","",""},
                            {"Mean needy patients","","",""},
                            {"Mean waiting time nurse","","",""},
                            {"Delay probability nurse","","",""},
                            {"Nurse occupancy","","",""}
                        },
                        new String [] {
                            "","Erlang-H","SO Erlang-R","M/M/s//n"
                        }
                    ));
                    jTable1.getColumnModel().getColumn(0).setPreferredWidth(200);
                    jTable1.setRowHeight(20);
                    jTable1.setColumnSelectionAllowed(true);
                    jTable1.setEditingRow(1);
                    jScrollPane2.setViewportView(jTable1);
                    jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

                    simButton.setText("Simulate!");
                    simButton.setPreferredSize(new java.awt.Dimension(90, 30));
                    simButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            simButtonActionPerformed(evt);
                        }
                    });

                    EfficientBox.setSelected(true);
                    EfficientBox.setText("Efficient");
                    EfficientBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            EfficientBoxActionPerformed(evt);
                        }
                    });

                    jLabel9.setText("(no holding and waiting times)");

                    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                    jPanel2.setLayout(jPanel2Layout);
                    jPanel2Layout.setHorizontalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel8))
                                    .addGap(19, 19, 19)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(LambdaTextField)
                                        .addComponent(MuTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                        .addComponent(DeltaTextField)
                                        .addComponent(sTextField)
                                        .addComponent(nTextField)
                                        .addComponent(pTextField)
                                        .addComponent(maxTimeTextField)))
                                .addComponent(ErlangRCheckBox)
                                .addComponent(MMsnCheckBox)
                                .addComponent(ErlangHCheckBox))
                            .addGap(39, 39, 39)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(EfficientBox)
                                        .addComponent(jLabel9)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGap(29, 29, 29)
                                            .addComponent(simButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(18, 18, 18)
                                    .addComponent(jScrollPane1))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE))
                            .addContainerGap())
                    );
                    jPanel2Layout.setVerticalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(13, 13, 13)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(LambdaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(MuTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(DeltaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(8, 8, 8)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(sTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(nTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(pTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(maxTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8)))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(3, 3, 3)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(ErlangHCheckBox)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(ErlangRCheckBox)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(MMsnCheckBox))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGap(9, 9, 9)
                                            .addComponent(EfficientBox)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel9)
                                            .addGap(10, 10, 10)
                                            .addComponent(simButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(28, 28, 28))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jScrollPane1)
                                    .addContainerGap())))
                    );

                    LambdaTextField.setText(""+lambda);
                    MuTextField.setText(""+mu);
                    sTextField.setText(""+s);
                    DeltaTextField.setText(""+delta);
                    nTextField.setText(""+n);
                    pTextField.setText(""+p);
                    ErlangHCheckBox.getAccessibleContext().setAccessibleName("ErlangHCheck");
                    ErlangRCheckBox.getAccessibleContext().setAccessibleName("ErlangRCheck");
                    maxTimeTextField.getAccessibleContext().setAccessibleDescription("");
                    maxTimeTextField.setText(""+maxTime);

                    jTabbedPane1.addTab("Input", jPanel2);

                    ChoiceBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All in System", "All in ED", "Nurse Queue Length" }));
                    ChoiceBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            ChoiceBoxActionPerformed(evt);
                        }
                    });

                    jPanel4.setBackground(new java.awt.Color(255, 255, 255));
                    jPanel4.setLayout(new java.awt.BorderLayout());

                    jPanel5.setBackground(new java.awt.Color(255, 255, 255));
                    jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));
                    jPanel4.add(jPanel5, java.awt.BorderLayout.CENTER);

                    jTable2.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                            "", "Erlang-H", "SO Erlang-R", "M/M/s//n"
                        }
                    ) {
                        boolean[] canEdit = new boolean [] {
                            false, false, false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }
                    });
                    jTable2.getColumnModel().getColumn(0).setPreferredWidth(40);
                    jScrollPane3.setViewportView(jTable2);

                    PCDF_Box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PDF", "CDF" }));
                    PCDF_Box.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            PCDF_BoxActionPerformed(evt);
                        }
                    });

                    PlotPanel.setBackground(new java.awt.Color(255, 255, 255));
                    PlotPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

                    javax.swing.GroupLayout PlotPanelLayout = new javax.swing.GroupLayout(PlotPanel);
                    PlotPanel.setLayout(PlotPanelLayout);
                    PlotPanelLayout.setHorizontalGroup(
                        PlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
                    );
                    PlotPanelLayout.setVerticalGroup(
                        PlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
                    );

                    ErlangHCheck.setSelected(true);
                    ErlangHCheck.setText("Erlang-H");
                    ErlangHCheck.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            ErlangHCheckActionPerformed(evt);
                        }
                    });

                    YomTovCheck.setSelected(true);
                    YomTovCheck.setText("Semi-open Erlang-R");
                    YomTovCheck.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            YomTovCheckActionPerformed(evt);
                        }
                    });

                    JenningsCheck.setSelected(true);
                    JenningsCheck.setText("Modified M/M/s//n");
                    JenningsCheck.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            JenningsCheckActionPerformed(evt);
                        }
                    });

                    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                    jPanel3.setLayout(jPanel3Layout);
                    jPanel3Layout.setHorizontalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(ChoiceBox, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(PCDF_Box, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(5, 5, 5)
                                    .addComponent(PlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap())
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(61, 61, 61)
                                    .addComponent(ErlangHCheck)
                                    .addGap(18, 18, 18)
                                    .addComponent(YomTovCheck)
                                    .addGap(18, 18, 18)
                                    .addComponent(JenningsCheck)
                                    .addContainerGap(100, Short.MAX_VALUE))))
                    );
                    jPanel3Layout.setVerticalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ErlangHCheck)
                                    .addComponent(YomTovCheck)
                                    .addComponent(JenningsCheck))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ChoiceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PCDF_Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 9, Short.MAX_VALUE))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(PlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addContainerGap())))
                    );

                    jTabbedPane1.addTab("tab2", jPanel3);

                    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                    getContentPane().setLayout(layout);
                    layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                        .addComponent(jTabbedPane1)
                    );
                    layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    );

                    jTabbedPane1.getAccessibleContext().setAccessibleName("");
                    jTabbedPane1.setTitleAt(0, "Input");
                    jTabbedPane1.setTitleAt(1, "Output");

                    pack();
                }// </editor-fold>//GEN-END:initComponents

    private void simButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simButtonActionPerformed
        if (st.isAlive()) {
            st.interrupt();
        } else if (p < 0 || p > 1) {
            JOptionPane.showMessageDialog(this, "Please insert a value in [0,1] for p.", "Input error", JOptionPane.WARNING_MESSAGE);
        } else if (lambda / (mu * (1 - p)) >= s && ErlangHCheckBox.isSelected()) {
            JOptionPane.showMessageDialog(this, "Erlang-H model is instable for this parameter setting. \n Please increase s.", "Input error", JOptionPane.WARNING_MESSAGE);
        } else if (lambda * (1 / mu + p / delta) / (1 - p) >= n && ErlangHCheckBox.isSelected()) {
            JOptionPane.showMessageDialog(this, "Erlang-H model is instable for this parameter setting. \n Please increase n.", "Input error", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                startSimulations();
            } catch (InterruptedException ex) {
                Logger.getLogger(SimulationApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_simButtonActionPerformed

    private void maxTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxTimeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxTimeTextFieldActionPerformed

    private void MMsnCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MMsnCheckBoxActionPerformed

    }//GEN-LAST:event_MMsnCheckBoxActionPerformed

    private void ErlangRCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErlangRCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ErlangRCheckBoxActionPerformed

    private void ErlangHCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErlangHCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ErlangHCheckBoxActionPerformed

    private void MuTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MuTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MuTextFieldActionPerformed

    private void LambdaTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LambdaTextFieldActionPerformed

    }//GEN-LAST:event_LambdaTextFieldActionPerformed

    private void PCDF_BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PCDF_BoxActionPerformed
        refreshProbabilityTable();
        PlotPanel.repaint();
    }//GEN-LAST:event_PCDF_BoxActionPerformed

    private void ChoiceBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChoiceBoxActionPerformed
        refreshProbabilityTable();
        PlotPanel.repaint();
    }//GEN-LAST:event_ChoiceBoxActionPerformed

    private void ErlangHCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErlangHCheckActionPerformed
        PlotPanel.repaint();
    }//GEN-LAST:event_ErlangHCheckActionPerformed

    private void YomTovCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YomTovCheckActionPerformed
        PlotPanel.repaint();
    }//GEN-LAST:event_YomTovCheckActionPerformed

    private void JenningsCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JenningsCheckActionPerformed
        PlotPanel.repaint();
    }//GEN-LAST:event_JenningsCheckActionPerformed

    private void EfficientBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EfficientBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EfficientBoxActionPerformed

    public void moreInitComponents() {

        LambdaTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    lambda = Double.parseDouble(LambdaTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    lambda = Double.parseDouble(LambdaTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try {
                    lambda = Double.parseDouble(LambdaTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }
        });

        MuTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    mu = Double.parseDouble(MuTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    mu = Double.parseDouble(MuTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try {
                    mu = Double.parseDouble(MuTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }
        });

        DeltaTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    delta = Double.parseDouble(DeltaTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    delta = Double.parseDouble(DeltaTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try {
                    delta = Double.parseDouble(DeltaTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }
        });

        sTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    s = (int) (Integer.parseInt(sTextField.getText()));
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    s = (int) (Integer.parseInt(sTextField.getText()));
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try {
                    s = (int) (Integer.parseInt(sTextField.getText()));
                } catch (java.lang.NumberFormatException er) {
                }
            }
        });

        nTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    n = (int) (Integer.parseInt(nTextField.getText()));
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    n = (int) (Integer.parseInt(nTextField.getText()));
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try {
                    n = (int) (Integer.parseInt(nTextField.getText()));
                } catch (java.lang.NumberFormatException er) {
                }
            }
        });

        pTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    p = Double.parseDouble(pTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    p = Double.parseDouble(pTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try {
                    p = Double.parseDouble(pTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }
        });

        maxTimeTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    maxTime = Double.parseDouble(maxTimeTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    maxTime = Double.parseDouble(maxTimeTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try {
                    maxTime = Double.parseDouble(maxTimeTextField.getText());
                } catch (java.lang.NumberFormatException er) {
                }
            }
        });
    }

    public void startSimulations() throws InterruptedException {

        ArrayList<Sim> sims = new ArrayList<>();

        if (ErlangHCheckBox.isSelected()) {
            Sim ed;
            if( !EfficientBox.isSelected() ){
                ed = new ED_Simulation(lambda, mu, delta, s, n, p);
            }else{
                ed = new ED_Simulation_Efficient(lambda, mu, delta, s, n, p);
            }
            sims.add(ed);
        }

        if (ErlangRCheckBox.isSelected()) {
            Sim yt;
            if( !EfficientBox.isSelected() ){ 
                yt = new YomTov_Simulation(lambda, mu, delta, s, n, p);
            }else{
                yt = new YomTov_Simulation_Efficient(lambda, mu, delta, s, n, p);
            }
            sims.add(yt);
        }
        if (MMsnCheckBox.isSelected()) {
            Sim jv;
            if( !EfficientBox.isSelected() ){ 
                jv = new Jennings_Simulation(lambda, mu, delta, s, n, p);
            }else{
                jv = new Jennings_Simulation_Efficient(mu, delta, s, n, p);
            }
            sims.add(jv);

        }

        try {
        try {
            st = new SimThread(sims, maxTime);
            st.start();
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Unstable system!", "Input error", JOptionPane.WARNING_MESSAGE);
            st.stop();
            simButton.setText("Simulate");
        }
        } catch( java.lang.IllegalThreadStateException e ){}
    }

    public double dec(double a) {
        return (int) (Math.pow(10, MAX_DEC) * a) / Math.pow(10, MAX_DEC);
    }

    public void refreshProbabilityTable(){

        if( PCDF_Box.getSelectedIndex() == 0 ){
            
            if( ChoiceBox.getSelectedIndex() == 0 ){
                outputTable = AllInSystempdf;
            }else if ( ChoiceBox.getSelectedIndex() == 1 ){
                outputTable = AllInEDpdf;
            }else{
                outputTable = serviceQueuepdf;
            } 
        }else{
            if( ChoiceBox.getSelectedIndex() == 0 ){
                outputTable = AllInSystemcdf;
            }else if ( ChoiceBox.getSelectedIndex() == 1 ){
                outputTable = AllInEDcdf;
            }else{
                outputTable = serviceQueuecdf;
            } 
            
        }
        
        plottingCoordinates = ConvertObjectTableToDouble( outputTable );
        PlotPanel.validate();
        jTable2.setModel(
                    new DefaultTableModel(
                            outputTable,
                            new String[]{
                                "", "Erlang-H", "SO Erlang-R", "M/M/s//n"
                            }
                    ) {
                        public boolean isCellEditable(int row, int column) {
                            //all cells false
                            return false;
                        }
                    });
        
        }
    
    public double[][] ConvertObjectTableToDouble( Object[][] obj ){
            double[][] out = new double[obj.length][obj[0].length];
            
            for(int i = 0; i < obj.length; i++ ){
                for( int j = 0; j < obj[0].length; j++ ){
                    if( obj[i][j].toString().equals("-")){
                        out[i][j] = -1;
                    }else if ( obj[i][j].toString().contains("E")){
                        out[i][j]=0;
                    }else{ 
                        out[i][j] = new Double(obj[i][j].toString()); }
                }          
            }
            
            return out;

            
        }
    
    
    public int[][] getCoordinates(boolean[] plot){
        xMin = 40;
        xMax = PlotPanel.getWidth()-30;
        yMin = PlotPanel.getHeight() - 30;
        yMax = 30;

        xSpacing = (xMax - xMin) / (plottingCoordinates.length);

        maxValue = 0;
        for( int i = 1; i < 4; i++ ){
            if ( !plot[i-1] ) continue;
            for( int j = 0; j < plottingCoordinates.length; j++ ){
                if( maxValue < plottingCoordinates[j][i] ) maxValue = plottingCoordinates[j][i];
            }
        }
       
        ySpacing = (yMin - yMax) / maxValue;
        
        
        
        int[][] transformedCoords = new int[4][plottingCoordinates.length*2+1];

        for( int j = 0; j < plottingCoordinates.length; j++ ){
            transformedCoords[0][2*j] = (int)(xMin + xSpacing * j);
            transformedCoords[0][2*j+1] = (int)(xMin + xSpacing * (j+1));
        }

        for ( int i = 1; i < 4; i++ ){
            if ( !plot[i-1] ) continue;
            for( int j = 0; j < plottingCoordinates.length; j++ ){
                transformedCoords[i][2*j] = (int)(yMin - ySpacing * plottingCoordinates[j][i]);
                transformedCoords[i][2*j+1] = (int)(yMin - ySpacing * plottingCoordinates[j][i]);
            }}

        return transformedCoords;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulationApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulationApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulationApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulationApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulationApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ChoiceBox;
    private javax.swing.JTextField DeltaTextField;
    private javax.swing.JCheckBox EfficientBox;
    private javax.swing.JCheckBox ErlangHCheck;
    private javax.swing.JCheckBox ErlangHCheckBox;
    private javax.swing.JCheckBox ErlangRCheckBox;
    private javax.swing.JCheckBox JenningsCheck;
    private javax.swing.JTextField LambdaTextField;
    private javax.swing.JTextField LambdaTextField2;
    private javax.swing.JTextField LambdaTextField6;
    private javax.swing.JTextField LambdaTextField7;
    private javax.swing.JCheckBox MMsnCheckBox;
    private javax.swing.JTextField MuTextField;
    private javax.swing.JTextPane OutputTextArea;
    private javax.swing.JComboBox PCDF_Box;
    private javax.swing.JPanel PlotPanel;
    private javax.swing.JCheckBox YomTovCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField maxTimeTextField;
    private javax.swing.JTextField nTextField;
    private javax.swing.JTextField pTextField;
    private javax.swing.JTextField runsTextField;
    private javax.swing.JTextField sTextField;
    private javax.swing.JButton simButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        //System.out.println(e.getType());
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        //System.out.println(e.getType());
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        //System.out.println(e.getType());
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    class SimThread extends Thread {

        ArrayList<Sim> simulation;
        double maxTime;
        ArrayList<SimResults> simr;

        SimThread(ArrayList<Sim> s, double maxTime) {
            this.simulation = s;
            this.maxTime = maxTime;
            this.simr = new ArrayList<SimResults>();
        }

        @Override
        public void run() {
            OutputTextArea.setText("");
            simButton.setText("Stop");
            for (int i = 0; i < simulation.size(); i++) {
                try {
                    long startTime = System.currentTimeMillis();
                    OutputTextArea.setText(OutputTextArea.getText() + getText(i) + " started... ");
                    simr.add(simulation.get(i).simulate(maxTime));
                    OutputTextArea.setText(OutputTextArea.getText() +  "finished.\n");
                    OutputTextArea.setText(OutputTextArea.getText() +  "Elapsed time: "+ dec((System.currentTimeMillis()-startTime)/1000) +" seconds \n");
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(jPanel1, "Unstable system!", "Input error", JOptionPane.WARNING_MESSAGE);
                    simButton.setText("Simulate");
                    this.stop();
                }
            }
            simButton.setText("Simulate");
            storeSimResults();

        }

        public String getText(int i) {
            if (simulation.get(i).getType() == 0) {
                return "Erlang-H simulation";
            } else if (simulation.get(i).getType() == 1) {
                return "Semi-open Erlang-R simulation";
            } else {
                return "Modified M/M/s//n";
            }
        }

        public ArrayList<SimResults> getSimResults() {
            return simr;
        }

        void storeSimResults() {
            //System.out.println(simulation.size());
            //System.out.println(simr.size());
            for (int i = 0; i < simulation.size(); i++) {
                if (simulation.get(i).getType() == 0) {
                    srErlangH = simr.get(i);
                }
                if (simulation.get(i).getType() == 1) {
                    srYomTov = simr.get(i);
                }
                if (simulation.get(i).getType() == 2) {
                    srJennings = simr.get(i);
                }
            }

            updateTables();
        }

        public void updateTables() {

            Object[][] obj = new Object[][]{
                {"Mean number in system", "-", "-", "-"},
                {"Mean number in ED", "-", "-", "-"},
                {"", "", "", ""},
                {"Mean holding queue length", "-", "-", "-"},
                {"Mean holding time", "-", "-", "-"},
                {"Holding probability", "-", "-", "-"},
                {"", "", "", ""},
                {"Mean needy patients", "-", "-", "-"},
                {"Mean waiting time nurse", "-", "-", "-"},
                {"Delay probability nurse", "-", "-", "-"},
                {"Nurse occupancy", "-", "-", "-"}};

            for (int i = 0; i < simr.size(); i++) {
                int col = simulation.get(i).getType();
                obj[0][col + 1] = dec(simr.get(i).getMeanAllInSystem());
                obj[1][col + 1] = dec(simr.get(i).getMeanTotalInSystem());
                obj[3][col + 1] = dec(simr.get(i).getMeanHoldingQueueLength(-1));
                obj[4][col + 1] = dec(simr.get(i).getMeanHoldingTime());
                obj[5][col + 1] = dec(simr.get(i).getHoldingProbability());
                obj[7][col + 1] = dec(simr.get(i).getMeanServiceQueueLength());
                obj[8][col + 1] = dec(simr.get(i).getMeanWaitingTime());
                obj[9][col + 1] = dec(simr.get(i).getWaitingProbability());
                obj[10][col +1] = dec(simr.get(i).getNurseOccupancy(s));

            }

            jTable1.setModel(
                    new DefaultTableModel(
                            obj,
                            new String[]{
                                "", "Erlang-H", "SO Erlang-R", "M/M/s//n"
                            }
                    ) {
                        public boolean isCellEditable(int row, int column) {
                            //all cells false
                            return false;
                        }
                    });
            
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(200);
            jTable1.validate();

            AllInEDpdf = new Object[n+1][4];
            AllInEDcdf = new Object[n+1][4];
            for( int i = 0; i <= n; i++ ){
               AllInEDpdf[i][0] = i; 
               AllInEDpdf[i][1] = "-";
               AllInEDpdf[i][2] = "-";
               AllInEDpdf[i][3] = "-";
               AllInEDcdf[i][0] = i; 
               AllInEDcdf[i][1] = "-";
               AllInEDcdf[i][2] = "-";
               AllInEDcdf[i][3] = "-";
            }
            
            for( int j = 0; j < simr.size(); j++ ){
                int col = simulation.get(j).getType();
                double sum = 0;
                double[] probs = simr.get(j).getTotalInSystemProbabilities();
                for(int k = 0 ; k < probs.length; k++){
                    sum += probs[k];
                    AllInEDpdf[k][col+1] = dec(probs[k]);
                    AllInEDcdf[k][col+1] = dec(sum);
                }               
            }
            
            serviceQueuepdf = new Object[n+1][4];
            serviceQueuecdf = new Object[n+1][4];
            for( int i = 0; i <= n; i++ ){
               serviceQueuepdf[i][0] = i; 
               serviceQueuepdf[i][1] = "-";
               serviceQueuepdf[i][2] = "-";
               serviceQueuepdf[i][3] = "-";
               serviceQueuecdf[i][0] = i; 
               serviceQueuecdf[i][1] = "-";
               serviceQueuecdf[i][2] = "-";
               serviceQueuecdf[i][3] = "-";
            }
            
            for( int j = 0; j < simr.size(); j++ ){
                int col = simulation.get(j).getType();
                double sum = 0;
                double[] probs = simr.get(j).getServiceQueueLengthProbabilities();
                for(int k = 0 ; k < probs.length; k++){
                    sum += probs[k];
                    serviceQueuepdf[k][col+1] = dec(probs[k]);
                    serviceQueuecdf[k][col+1] = dec(sum);
                }               
            }
            
            
            int maxAllInSystem = (int)(n + 2*Math.sqrt(n));
            AllInSystempdf = new Object[maxAllInSystem+1][4];
            AllInSystemcdf = new Object[maxAllInSystem+1][4];
            for( int i = 0; i <= maxAllInSystem; i++ ){
               AllInSystempdf[i][0] = i; 
               AllInSystempdf[i][1] = "-";
               AllInSystempdf[i][2] = "-";
               AllInSystempdf[i][3] = "-";
               AllInSystemcdf[i][0] = i; 
               AllInSystemcdf[i][1] = "-";
               AllInSystemcdf[i][2] = "-";
               AllInSystemcdf[i][3] = "-";
            }
            
            for( int j = 0; j < simr.size(); j++ ){
                int col = simulation.get(j).getType();
                double sum = 0;
                double[] probs = simr.get(j).getAllInSystemProbabilities(maxAllInSystem+1);
                for(int k = 0 ; k < maxAllInSystem+1; k++){
                    sum += probs[k];
                    AllInSystempdf[k][col+1] = dec(probs[k]);
                    AllInSystemcdf[k][col+1] = dec(sum);
                }               
            }
            
            refreshProbabilityTable();
            
        }
        


    }
    
    

    public class Graph extends JPanel {

        public Graph() {
            this.setBackground(new java.awt.Color(255, 255, 255));
        }

        @Override
        public void paintComponent(Graphics g) {
            Graphics2D gr = (Graphics2D) g; // This is if you want to use Graphics2D
            // Now do the drawing here

        }

        public void plotErlangH(double[] array) {

        }

    }
}
